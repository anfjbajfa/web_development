import{i as s,y as n,j as l,k as m,A as c,eF as _,e as g}from"./index-c6cfe049.js";import{d}from"./FeatureSet-402c1fc5.js";import{n as f,r as v}from"./FeatureLayerView2D-30cdb54f.js";import{d as S}from"./FeatureEffect-0fa11288.js";import"./Container-5acd0ce7.js";import"./parser-7740a44f.js";import"./highlightReasons-54b6b965.js";import"./definitions-f33e80b3.js";import"./enums-2e633670.js";import"./Texture-6d5abce7.js";import"./featureConversionUtils-830d3ed6.js";import"./OptimizedFeature-059c854c.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./timeSupport-219067f1.js";import"./LayerView-e36663b3.js";import"./TechniqueInstance-c60140cc.js";import"./UpdateTracking2D-ebe3e38b.js";import"./BidiEngine-26aff129.js";import"./GeometryUtils-a7dec725.js";import"./enums-fb32c1bb.js";import"./utils-2af5df8d.js";import"./Rect-ea14f53a.js";import"./LabelMetric-18a06377.js";import"./Program-ceb7c31f.js";import"./VertexElementDescriptor-2925c6af.js";import"./defaults-458d9190.js";import"./defaultsJSON-59981e75.js";import"./BindType-d21d71dd.js";import"./Util-bd8e9eff.js";import"./vec42-614f5847.js";import"./vec4f64-430e4feb.js";import"./TileContainer-47aa2b34.js";import"./WGLContainer-437ea4a6.js";import"./ProgramTemplate-fe288a36.js";import"./vec3f32-ad1dc57f.js";import"./StyleDefinition-df636448.js";import"./config-1337d16e.js";import"./earcut-354b01bb.js";import"./CircularArray-50add9d1.js";import"./tileUtils-c2f19f52.js";import"./lengthUtils-806c8c03.js";import"./sizeVariableUtils-d4870b0d.js";import"./OrderByInfo-3aa9a06f.js";import"./labelingInfo-754601fb.js";import"./labelUtils-e96173b2.js";import"./jsonUtils-17af088a.js";import"./heatmapUtils-dc73c34c.js";import"./SDFHelper-cf9aaf4f.js";import"./floatRGBA-2ea1fed8.js";import"./FeatureCommandQueue-117fe953.js";import"./constants-991354c8.js";import"./HighlightCounter-0ba3d8b1.js";import"./floorFilterUtils-080a7cd2.js";import"./popupUtils-70bac4b7.js";import"./RefreshableLayerView-90cb0307.js";import"./jsonUtils-a377b268.js";const C=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([n()],t.prototype,"_isUserPaused",void 0),s([n({readOnly:!0})],t.prototype,"connectionStatus",null),s([n({type:S})],t.prototype,"filter",void 0),t=s([l("esri.views.layers.StreamLayerView")],t),t};let o=class extends C(v){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),m(()=>this.layer.purgeOptions,()=>this._update()),m(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new c("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return _(e.map(i=>this.on(i,t)));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then(i=>i.streamMessenger.enableEvent(e,!0));const p=super.on(e,t),a=this;return g(()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then(i=>i.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){var p,a,i;if(!((p=this.layer.timeInfo)!=null&&p.endField||(a=this.layer.timeInfo)!=null&&a.startField||(i=this.layer.timeInfo)!=null&&i.trackIdField))throw new c("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return f(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(y=>{const h=d.fromJSON(y);return h.features.forEach(u=>{u.layer=this.layer,u.sourceLayer=this.layer}),h}),new d({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([n()],o.prototype,"pipelineConnectionStatus",void 0),s([n()],o.prototype,"pipelineErrorString",void 0),s([n({readOnly:!0})],o.prototype,"connectionError",null),s([n({readOnly:!0})],o.prototype,"_streamConnectionStatus",null),o=s([l("esri.views.2d.layers.StreamLayerView2D")],o);const we=o;export{we as default};
