import{aQ as p,A as s,bl as i}from"./index-c6cfe049.js";import{l as n}from"./MeshVertexAttributes-dcaaa9d9.js";import{M as a}from"./vertexSpaceConversion-bfc515e6.js";import"./mat3f64-e19cdcb8.js";import"./mat4f64-9a8384aa.js";import"./spatialReferenceEllipsoidUtils-eca7bf87.js";import"./computeTranslationToOriginAndRotation-ad79d5a8.js";import"./meshVertexSpaceUtils-b044d3fd.js";import"./MeshLocalVertexSpace-411e8581.js";import"./vec3-a9852a06.js";import"./projection-d79f34ed.js";import"./DoubleArray-2311ad80.js";import"./BufferView-b0b4cfa5.js";import"./vec42-614f5847.js";import"./vec4-4ea09148.js";async function j(t,r,m){await Promise.resolve(),p(m);const o=a(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{j as convertMeshVertexSpace};
