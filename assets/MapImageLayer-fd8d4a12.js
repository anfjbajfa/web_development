import{aV as $,e2 as v,bP as g,ea as O,eb as T,U as f,b3 as P,bu as E,ec as L,A as x,f as F,i as o,y as s,ed as S,bf as M,bh as R,j,ee as N,cl as _}from"./index-c6cfe049.js";import{S as J}from"./MultiOriginJSONSupport-7cf2254f.js";import{i as U}from"./APIKeyMixin-99f87d3a.js";import{m as q,f as A,t as V}from"./SublayersOwner-a26673a1.js";import{l as k}from"./ArcGISService-866655aa.js";import{l as z}from"./BlendLayer-3864a0e6.js";import{e as Z}from"./CustomParametersMixin-d7ae0b0b.js";import{b as B}from"./OperationalLayer-d666f103.js";import{j as C}from"./PortalLayer-089ac58c.js";import{f as D}from"./RefreshableLayer-768cbb26.js";import{t as G}from"./ScaleRangeLayer-2709e17c.js";import{l as H}from"./TemporalLayer-58903be1.js";import{p as K}from"./commonProperties-b537568a.js";import{y as W}from"./ExportImageParameters-d0da1106.js";import{t as Q}from"./imageBitmapUtils-a9660a2f.js";import{e as I}from"./sublayerUtils-06122f2a.js";import{t as X}from"./versionUtils-20464c3d.js";import"./Version-d58b3305.js";import"./portalItemUtils-bca17985.js";import"./UniqueValueRenderer-2d905f9d.js";import"./ColorStop-3bd1e817.js";import"./diffUtils-a81eba90.js";import"./colorRamps-2725f079.js";import"./sizeVariableUtils-d4870b0d.js";import"./visualVariableUtils-57487c58.js";import"./lengthUtils-806c8c03.js";import"./jsonUtils-17af088a.js";import"./defaults-458d9190.js";import"./defaultsJSON-59981e75.js";import"./styleUtils-12717ade.js";import"./jsonUtils-0cfa0239.js";import"./LRUCache-be26918b.js";import"./FieldsIndex-815a254a.js";import"./UnknownTimeZone-b1c85c08.js";import"./OverrideHelper-78bed9ed.js";import"./colorUtils-60e0b64a.js";import"./vec42-614f5847.js";import"./vec4f64-430e4feb.js";import"./utils-2af5df8d.js";import"./quantizationUtils-07a0781e.js";import"./heatmapUtils-dc73c34c.js";import"./QueryTask-1b11ab84.js";import"./infoFor3D-24efd44a.js";import"./executeForIds-6228f84d.js";import"./query-6eccb0bd.js";import"./pbfQueryUtils-90563513.js";import"./pbf-459508d1.js";import"./OptimizedFeature-059c854c.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-679c8a27.js";import"./executeQueryJSON-98e87b3a.js";import"./FeatureSet-402c1fc5.js";import"./executeQueryPBF-5326e45a.js";import"./featureConversionUtils-830d3ed6.js";import"./featureLayerUtils-6e37b4eb.js";import"./RelationshipQuery-21a3a6e4.js";import"./FeatureType-b94bd31c.js";import"./FeatureTemplate-1f82a77c.js";import"./labelingInfo-754601fb.js";import"./labelUtils-e96173b2.js";import"./LayerFloorInfo-b8c105f0.js";import"./Relationship-96215281.js";import"./serviceCapabilitiesUtils-27401658.js";import"./popupUtils-c2bd8f97.js";import"./jsonUtils-a377b268.js";import"./parser-7740a44f.js";import"./TimeInfo-3ab6fbf6.js";import"./ElevationInfo-58ee6e4f.js";import"./floorFilterUtils-080a7cd2.js";let i=class extends z(H(G(q(A(k(B(C(J(D(U(Z(_)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new W({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch($).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const n=r.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,n,t){var l,d,b;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:m})=>m&&m.toArray().reverse()).toArray();let p=!1;const h=v(t.origin);if((l=this.capabilities)!=null&&l.operations.supportsExportMap&&((b=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&b.supportsDynamicLayers)){if(h===g.PORTAL_ITEM){const m=this.createSublayersForOrigin("service").sublayers;p=I(a,m,g.SERVICE)}else if(h>g.PORTAL_ITEM){const m=this.createSublayersForOrigin("portal-item");p=I(a,m.sublayers,v(m.origin))}}const c=[],u={writeSublayerStructure:p,...t};let y=p||this.hasVisibleLayersForOrigin(h);a.forEach(m=>{const w=m.write({},u);c.push(w),y=y||m.originOf("visible")==="user"}),c.some(m=>Object.keys(m).length>1)&&(r.layers=c),y&&(r.visibleLayers=a.filter(m=>m.visible).map(m=>m.id))}createExportImageParameters(e,r,n,t){const a=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(t==null?void 0:t.floors)??null,this._exportImageParameters.scale=O({extent:e,width:r})*a;const p=this._exportImageParameters.toJSON(),h=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},c=e==null?void 0:e.spatialReference,u=T(c);p.dpi*=a;const y={};if(t!=null&&t.timeExtent){const{start:l,end:d}=t.timeExtent.toJSON();y.time=l&&d&&l===d?""+l:`${l??"null"},${d??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:u,imageSR:u,size:r+","+n,...p,...h,...y}}async fetchImage(e,r,n,t){const{data:a}=await this._fetchImage("image",e,r,n,t);return a}async fetchImageBitmap(e,r,n,t){const{data:a,url:p}=await this._fetchImage("blob",e,r,n,t);return Q(a,p,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await f(this.url,r),{extent:t,fullExtent:a,timeExtent:p}=n,h=t||a;return{fullExtent:h&&P.fromJSON(h),timeExtent:p&&E.fromJSON({start:p[0],end:p[1]})}}loadAll(){return L(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return X(this,e)}async _fetchImage(e,r,n,t,a){var c,u,y;const p={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,n,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},h=this.parsedUrl.path+"/export";if(((c=p.query)==null?void 0:c.dynamicLayers)!=null&&!((y=(u=this.capabilities)==null?void 0:u.exportMap)!=null&&y.supportsDynamicLayers))throw new x("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:l}=await f(h,p);return{data:l,url:h}}catch(l){throw F(l)?l:new x("mapimagelayer:image-fetch-error",`Unable to load image: ${h}`,{error:l})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:n}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){var r;return!(e==null||!((r=this.sublayersSourceJSON[e])!=null&&r.visibleLayers))}};o([s(S("dateFieldsTimeReference"))],i.prototype,"dateFieldsTimeZone",void 0),o([s({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),o([s()],i.prototype,"dpi",void 0),o([s()],i.prototype,"gdbVersion",void 0),o([s()],i.prototype,"imageFormat",void 0),o([M("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),o([s({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),o([s({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),o([s()],i.prototype,"imageTransparency",void 0),o([s({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),o([s({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),o([s({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),o([s({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),o([s(S("preferredTimeReference"))],i.prototype,"preferredTimeZone",void 0),o([s()],i.prototype,"sourceJSON",void 0),o([s({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),o([R("sublayers",{layers:{type:[V]},visibleLayers:{type:[N]}})],i.prototype,"writeSublayers",null),o([s({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),o([s({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),o([s(K)],i.prototype,"url",void 0),i=o([j("esri.layers.MapImageLayer")],i);const ut=i;export{ut as default};
